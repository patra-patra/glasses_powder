import os
import sys
import re
from flask import Flask, render_template, request, redirect, url_for, flash, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask import session  # ‚Üê —ç—Ç–æ –¥–ª—è —Å–µ—Å—Å–∏–∏
import random
from datetime import timedelta, datetime

from werkzeug.utils import secure_filename

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from backend.app.models.utils import get_all_products
from backend.app.models.product import db, init_db, User, Product, Order, UserDeliveryAddress, OrderItem, ContactMessage
from flask import abort

# –ü—É—Ç—å –∫ –ë–î
BASE_DIR = os.path.abspath(os.path.dirname(__file__))
DB_PATH = os.path.join(BASE_DIR, "backend", "app", "db", "products.db")

# –°–æ–∑–¥–∞–Ω–∏–µ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(
    __name__,
    static_folder=os.path.join(BASE_DIR, "backend", "app", "static"),
    template_folder=os.path.join(BASE_DIR, "backend", "app", "templates")
)
app.secret_key = 'supersecretkey'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
app.config['SQLALCHEMY_DATABASE_URI'] = f"sqlite:///{DB_PATH}"
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã
db.init_app(app)

with app.app_context():
    # –¢–∞–±–ª–∏—Ü—ã —É–∂–µ –µ—Å—Ç—å, –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º db.create_all()
    pass

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
from sqlalchemy.sql.expression import func

@app.route('/')
def home():
    # –í—ã–±–∏—Ä–∞–µ–º 4 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    new_products = Product.query.order_by(func.random()).limit(4).all()

    return render_template('index.html', new_products=new_products)

@app.route('/account')
def account():
    user_id = session.get('user_id')
    if not user_id:
        return redirect(url_for('reg'))

    user = db.session.get(User, session['user_id'])

    if not user:
        return redirect(url_for('reg'))

    orders = Order.query.filter_by(user_id=user_id).order_by(Order.created_at.desc()).all()
    addresses = UserDeliveryAddress.query.filter_by(user_id=user.id).all()

    # üëá –î–æ–±–∞–≤–ª—è–µ–º orders
    return render_template('account.html', user=user, addresses=addresses, orders=orders, datetime=datetime)

from flask import request, flash
from datetime import timedelta

@app.route('/repeat_order/<int:order_id>', methods=['POST'])
def repeat_order(order_id):
    user_id = session.get('user_id')
    if not user_id:
        return redirect(url_for('reg'))

    old_order = Order.query.filter_by(id=order_id, user_id=user_id).first()
    if not old_order:
        flash('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
        return redirect(url_for('account'))

    try:
        # –ü–µ—Ä–µ—Å—á—ë—Ç —Ü–µ–Ω—ã, –µ—Å–ª–∏ –≤ —Å—Ç–∞—Ä–æ–º –∑–∞–∫–∞–∑–µ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        order_price = old_order.price
        if not order_price or order_price == 0:
            order_price = sum(item.price * item.quantity for item in old_order.items)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏: –Ω–∞–ø—Ä–∏–º–µ—Ä, +2 –¥–Ω—è –æ—Ç —Ç–µ–∫—É—â–µ–π
        delivered_at = datetime.utcnow() + timedelta(days=2)

        new_order = Order(
            user_id=user_id,
            delivery_address_id=old_order.delivery_address_id,
            created_at=datetime.utcnow(),
            delivered_at=delivered_at,
            status='–Ω–æ–≤—ã–π',
            price=order_price
        )
        db.session.add(new_order)
        db.session.flush()

        for item in old_order.items:
            new_item = OrderItem(
                order_id=new_order.id,
                product_id=item.product_id,
                quantity=item.quantity,
                price=int(item.price)
            )
            db.session.add(new_item)

        db.session.commit()
        flash('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–≤—Ç–æ—Ä—ë–Ω', 'success')
    except Exception as e:
        db.session.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        flash('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞', 'error')

    return redirect(url_for('account'))




@app.template_filter('sum')
def sum_total(items, attribute='price', multiply='quantity'):
    total = 0
    for item in items:
        value = getattr(item, attribute) or 0
        qty = getattr(item, multiply) or 0
        total += value * qty
    return total
from flask import request, redirect, url_for, flash, session

from flask import request, redirect, url_for, flash
from flask_login import login_required, current_user

@app.route('/update_default_address', methods=['POST'])
@login_required
def update_default_address():
    user_id = current_user.id
    default_address_id = request.form.get('default_address')

    if not default_address_id:
        flash("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.", "error")
        return redirect(url_for('account'))

    # –°–±—Ä–æ—Å–∏—Ç—å —É –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤ –¥–µ—Ñ–æ–ª—Ç –≤ 0
    UserDeliveryAddress.query.filter_by(user_id=user_id).update({'default': 0})

    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º (1)
    address = UserDeliveryAddress.query.filter_by(id=default_address_id, user_id=user_id).first()
    if not address:
        flash("–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.", "error")
        return redirect(url_for('account'))

    address.default = 1
    db.session.commit()

    flash("–û—Å–Ω–æ–≤–Ω–æ–π –∞–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.", "success")
    return redirect(url_for('account'))




@app.route('/catalog/<category>')
def catalog_category(category):
    # –ü—Ä–æ—Å—Ç–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ /catalog —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º type=category
    return redirect(url_for('catalog', type=category))

from flask import render_template, request, redirect, url_for, flash
from datetime import datetime

@app.route('/contact', methods=['GET', 'POST'])
def contact():
    if request.method == 'POST':
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
        if not request.form.get('consent'):
            flash('–í—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.', 'error')
            return redirect(url_for('contact'))

        # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã
        name = request.form.get('name')
        email = request.form.get('email')
        phone = request.form.get('phone')
        subject = request.form.get('subject')
        message = request.form.get('message')

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        new_message = ContactMessage(
            name=name,
            email=email,
            phone=phone,
            subject=subject,
            message=message,
            created_at=datetime.utcnow()
        )
        db.session.add(new_message)
        db.session.commit()

        flash('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', 'success')
        return redirect(url_for('contact'))

    return render_template('contact.html')


@app.route('/reg')
def reg():
    return render_template('registration_auth.html')

from flask import session, g

from flask import g, session

@app.before_request
def load_cart_quantity():
    cart = session.get('cart', {})
    g.cart_quantity = sum(cart.values()) if cart else 0



@app.context_processor
def inject_session():
    return dict(session=session)

from flask import session, request, jsonify

from flask import request, redirect, url_for, session

@app.route('/add_to_cart', methods=['POST'])
def add_to_cart():
    product_id = request.form.get('product_id')

    if not product_id:
        return redirect(url_for('home'))

    cart = session.get('cart', {})

    if product_id in cart:
        cart[product_id] += 1
    else:
        cart[product_id] = 1

    session['cart'] = cart
    session.modified = True

    # –ü–æ–ª—É—á–∞–µ–º URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Å –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏—à—ë–ª –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –æ—Å—Ç–∞—Ç—å—Å—è –Ω–∞ –Ω–µ–π
    referer = request.headers.get("Referer")
    if referer:
        return redirect(referer)
    else:
        return redirect(url_for('home'))


@app.route('/cart')
def cart():
    cart = session.get('cart', {})
    products = []

    if cart:
        product_ids = []
        for key in cart.keys():
            try:
                product_ids.append(int(key))
            except ValueError:
                # –ú–æ–∂–Ω–æ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á
                # print(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á –≤ –∫–æ—Ä–∑–∏–Ω–µ: {key}")
                continue

        products_db = Product.query.filter(Product.id.in_(product_ids)).all()

        for product in products_db:
            quantity = cart.get(str(product.id), 0)
            products.append({
                'id': product.id,
                'name': product.name,
                'price': product.price,
                'quantity': quantity,
                'image': product.photonum
            })

    total_price = sum(item['price'] * item['quantity'] for item in products)

    return render_template('cart.html', products=products, total_price=total_price)


from flask import request, session, redirect, url_for, flash
from datetime import datetime, timedelta
import random

@app.route('/create_order', methods=['POST'])
def create_order():
    user_id = session.get('user_id')
    if not user_id:
        flash("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.")
        return redirect(url_for('reg'))  # –ò–ª–∏ 'login', –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

    cart = session.get('cart', {})
    if not cart:
        flash("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return redirect(url_for('cart'))  # –ú–æ–∂–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ—Ä–∑–∏–Ω—ã

    address = UserDeliveryAddress.query.filter_by(user_id=user_id).first()
    if not address:
        flash("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.")
        return redirect(url_for('account'))

    now = datetime.now()
    delivered_at = now + timedelta(days=random.randint(1, 30))

    order = Order(
        user_id=user_id,
        delivery_address_id=address.id,
        created_at=now,
        delivered_at=delivered_at,
        status="–≤ –ø—É—Ç–∏"
    )
    db.session.add(order)
    db.session.flush()  # —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å order.id

    total_price = 0.0

    for product_id_str, qty in cart.items():
        try:
            product_id = int(product_id_str)
            quantity = int(qty)
        except (ValueError, TypeError):
            continue

        if quantity <= 0:
            continue

        product = Product.query.get(product_id)
        if not product:
            continue

        item_price = product.price or 0
        total_price += item_price * quantity

        db.session.add(OrderItem(
            order_id=order.id,
            product_id=product_id,
            quantity=quantity,
            price=item_price
        ))

    order.price = total_price

    db.session.commit()
    session.pop('cart', None)
    flash("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")
    return redirect(url_for('account'))

from flask import request, redirect, url_for, session

@app.route('/update_cart', methods=['POST'])
def update_cart():
    product_id = request.form.get('product_id')
    quantity = request.form.get('quantity')

    try:
        quantity = int(quantity)
    except (TypeError, ValueError):
        return redirect(url_for('cart'))

    cart = session.get('cart', {})

    if quantity <= 0:
        cart.pop(product_id, None)
    else:
        cart[product_id] = quantity

    session['cart'] = cart
    session.modified = True

    return redirect(url_for('cart'))

@app.route('/register', methods=['POST'])
def register():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        first_name = request.form.get('first_name')
        last_name = request.form.get('last_name')
        phone = request.form.get('phone')
        password = request.form.get('password')
        birthdate_str = request.form.get('birthdate')
        birthdate = datetime.strptime(birthdate_str, '%Y-%m-%d').date() if birthdate_str else None


        # –ê–¥—Ä–µ—Å
        street = request.form.get('street')
        city = request.form.get('city')

        # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            first_name=first_name,
            last_name=last_name,
            phone=phone,
            password=password,
            birthdate=birthdate
        )
        db.session.add(user)
        db.session.commit()  # –ü–æ—Å–ª–µ commit —É user –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å id

        print(user)  # –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ user –Ω–µ None
        print(user.id)  # –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ id –µ—Å—Ç—å

        # –°–æ–∑–¥–∞—ë–º –∞–¥—Ä–µ—Å
        address = UserDeliveryAddress(
            user_id=user.id,
            street=street,
            city=city
        )
        db.session.add(address)
        db.session.commit()

        session['user_id'] = user.id

        print("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:", user.id)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON
        return redirect(url_for('account'))

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", e)
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/logout')
def logout():
    session.clear()  # –æ—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏, –≤ —Ç–æ–º —á–∏—Å–ª–µ user_id
    return redirect(url_for('reg'))  # –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–≤—Ö–æ–¥–∞

@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    if not data:
        return jsonify({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}), 400

    phone = data.get('phone')
    password = data.get('password')

    user = User.query.filter_by(phone=phone).first()
    if not user or user.password != password:
        return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'}), 401

    session['user_id'] = user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–¥–º–∏–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user.id == 1:  # –∏–ª–∏ user.is_admin, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–æ–µ –ø–æ–ª–µ
        return jsonify({'message': '–ê–¥–º–∏–Ω –≤–æ—à—ë–ª', 'redirect': url_for('admin_panel')})
    else:
        return jsonify({'message': '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥', 'redirect': url_for('account')})


@app.route('/update_profile', methods=['POST'])
def update_profile():
    if not session.get('user_id'):
        return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401

    data = request.get_json()
    user = db.session.get(User, session['user_id'])

    user.first_name = data.get('first_name', user.first_name)
    user.last_name = data.get('last_name', user.last_name)
    user.phone = data.get('phone', user.phone)
    user.birthdate = data.get('birthdate') or None

    db.session.commit()

    return jsonify({'message': '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'}), 200

@app.route('/change_password', methods=['POST'])
def change_password():
    if 'user_id' not in session:
        return jsonify({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}), 401

    data = request.get_json()
    print("Data from request:", data)  # <-- –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    if not data:
        return jsonify({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}), 400

    current = data.get('current_password')
    new = data.get('new_password')

    if not current or not new:
        return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–æ–ª–∏'}), 400

    user = User.query.get(session['user_id'])

    if user.password != current:
        return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å'}), 400

    user.password = new
    db.session.commit()

    return jsonify({'message': '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω'}), 200


from flask import request, redirect, url_for, flash
from flask_login import current_user, login_required


from flask import Flask, request, redirect, url_for, flash
from flask_login import current_user, login_required

@app.route('/add_address', methods=['POST'])
@login_required
def add_address():
    city = request.form.get('city')
    street = request.form.get('street')
    default = request.form.get('default') == '1'
    print("Form data:", request.form)
    if not city or not street:
        flash('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è')
        return redirect(url_for('account'))  # –∏–ª–∏ –∫—É–¥–∞ —É –≤–∞—Å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç

    # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–º, —Å–±—Ä–æ—Å–∏–º —É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö default=0
    if default:
        for addr in current_user.delivery_addresses:
            addr.default = 0

    new_address = UserDeliveryAddress(
        user_id=current_user.id,
        city=city,
        street=street,
        default=1 if default else 0
    )

    db.session.add(new_address)
    db.session.commit()

    print("Form data:", request.form)
    print("Current user ID:", current_user.id)

    flash('–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
    return redirect(url_for('account'))  # –∏–ª–∏ –∫—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ


from sqlalchemy import or_

@app.route('/catalog')
def catalog():
    selected_brands = request.args.getlist('brand')
    selected_country = request.args.get('country')
    min_price = request.args.get('min_price', type=int)
    max_price = request.args.get('max_price', type=int)
    product_type = request.args.get('type')
    sort = request.args.get('sort', 'popularity')
    order = request.args.get('order', 'desc')
    page = request.args.get('page', 1, type=int)
    category = request.args.get('category')
    query_text = request.args.get('q', '').strip().lower()
    per_page = 102

    query = Product.query

    # üîç –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    if query_text:
        query = query.filter(
            or_(
                Product.name.ilike(f'%{query_text}%'),
                Product.brand.ilike(f'%{query_text}%'),
                Product.types.ilike(f'%{query_text}%'),
                Product.country.ilike(f'%{query_text}%'),
                Product.desc.ilike(f'%{query_text}%')
            )
        )

    # üéØ –¢–∏–ø –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    if product_type:
        query = query.filter(Product.types == product_type)
    elif category == 'cosmetics':
        query = query.filter(Product.types.in_([
            '–¢–æ–≤–∞—Ä—ã –¥–ª—è –ª–∏—Ü–∞', '–¢–æ–≤–∞—Ä—ã –¥–ª—è –≥—É–±', '–¢–æ–≤–∞—Ä—ã –¥–ª—è –±—Ä–æ–≤–µ–π', '–¢–æ–≤–∞—Ä—ã –¥–ª—è –≥–ª–∞–∑'
        ]))
    elif category == 'glasses':
        query = query.filter(Product.types.in_([
            '–ú—É–∂—Å–∫–∏–µ', '–ñ–µ–Ω—Å–∫–∏–µ', '–£–Ω–∏—Å–µ–∫—Å'
        ]))

    # üßº –§–∏–ª—å—Ç—Ä—ã
    if selected_brands:
        query = query.filter(Product.brand.in_(selected_brands))

    if selected_country:
        if selected_country == '–°—Ç—Ä–∞–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞':
            query = query.filter((Product.country == '') | (Product.country == None))
        else:
            query = query.filter(Product.country == selected_country)

    if min_price is not None:
        query = query.filter(Product.price >= min_price)
    if max_price is not None:
        query = query.filter(Product.price <= max_price)

    # üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if sort == 'price':
        query = query.order_by(Product.price.asc() if order == 'asc' else Product.price.desc())
    elif sort == 'popularity':
        query = (
            query
            .outerjoin(OrderItem, OrderItem.product_id == Product.id)
            .group_by(Product.id)
            .order_by(func.coalesce(func.sum(OrderItem.quantity), 0).desc())
        )
    elif sort == 'new':
        query = query.order_by(Product.id.desc())  # –∏–ª–∏ –ø–æ –ø–æ–ª—é created_at, –µ—Å–ª–∏ –µ—Å—Ç—å
    else:
        query = query.order_by(Product.id.desc())

    # üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    products = query.paginate(page=page, per_page=per_page)

    # üè∑ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥—ã –∏ —Å—Ç—Ä–∞–Ω—ã
    all_brands = db.session.query(Product.brand).distinct().all()
    all_countries = db.session.query(Product.country).distinct().all()

    countries = []
    for (country,) in all_countries:
        if not country or country.strip() == "":
            countries.append("–°—Ç—Ä–∞–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        else:
            countries.append(country.strip())
    countries = sorted(set(countries))

    brands = [b[0] for b in all_brands]

    return render_template(
        'empty_category_page.html',
        products=products,
        brands=brands,
        countries=countries,
        selected_brands=selected_brands,
        selected_country=selected_country,
        min_price=min_price,
        max_price=max_price,
        current_type=product_type,
        query=query_text,  # ‚Üê –≤–∞–∂–Ω–æ
        sort=sort,
        order=order,
        category=category
    )

from sqlalchemy import func, desc

def get_products_sorted_by_popularity(include_zero_orders=True):
    query = (
        db.session.query(
            Product,
            func.coalesce(func.sum(OrderItem.quantity), 0).label("total_orders")
        )
        .outerjoin(OrderItem, OrderItem.product_id == Product.id)
        .group_by(Product.id)
        .order_by(desc("total_orders"))
    )
    return [
        {**product.to_dict(), "total_orders": int(total_orders)}
        for product, total_orders in query.all()
    ]


from flask import request

@app.route('/search')
def search():
    query = request.args.get('q', '').strip()
    sort = request.args.get('sort', 'popularity')
    order = request.args.get('order', 'desc')
    product_type = request.args.get('type')
    category = request.args.get('category')

    products_query = Product.query

    # –§–∏–ª—å—Ç—Ä –ø–æ category/type, –∫–∞–∫ –≤ catalog
    if product_type:
        products_query = products_query.filter(Product.types == product_type)
    elif category == 'cosmetics':
        products_query = products_query.filter(Product.types.in_([
            '–¢–æ–≤–∞—Ä—ã –¥–ª—è –ª–∏—Ü–∞', '–¢–æ–≤–∞—Ä—ã –¥–ª—è –≥—É–±', '–¢–æ–≤–∞—Ä—ã –¥–ª—è –±—Ä–æ–≤–µ–π', '–¢–æ–≤–∞—Ä—ã –¥–ª—è –≥–ª–∞–∑'
        ]))
    elif category == 'glasses':
        products_query = products_query.filter(Product.types.in_([
            '–ú—É–∂—Å–∫–∏–µ', '–ñ–µ–Ω—Å–∫–∏–µ', '–£–Ω–∏—Å–µ–∫—Å'
        ]))

    if query:
        search_term = f"%{query}%"
        products_query = products_query.filter(
            (Product.name.ilike(search_term)) | (Product.desc.ilike(search_term))
        )

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if sort == 'price':
        products_query = products_query.order_by(Product.price.asc() if order == 'asc' else Product.price.desc())
    elif sort == 'new':
        products_query = products_query.order_by(Product.id.desc())
    else:  # popularity ‚Äî —Ç—É—Ç –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
        products_query = products_query.order_by(Product.id.desc())

    products = products_query.limit(100).all()

    return render_template('partials/product_list.html', products=products)


#=========–ê–¥–º–∏–Ω=============

UPLOAD_FOLDER = 'static/uploads'  # –ü–∞–ø–∫–∞, –≥–¥–µ –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def is_admin():
    return session.get('user_id') == 1  # –Ω–∞–ø—Ä–∏–º–µ—Ä, id 1 ‚Äî –∞–¥–º–∏–Ω

# –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@app.route('/admin')
def admin_panel():
    products = Product.query.all()
    orders = Order.query.order_by(Order.created_at.desc()).all()

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
    cosmetics_subcategories = db.session.query(Product.types).filter(
        Product.types.in_([
            '–¢–æ–≤–∞—Ä—ã –¥–ª—è –ª–∏—Ü–∞', '–¢–æ–≤–∞—Ä—ã –¥–ª—è –≥—É–±', '–¢–æ–≤–∞—Ä—ã –¥–ª—è –±—Ä–æ–≤–µ–π', '–¢–æ–≤–∞—Ä—ã –¥–ª—è –≥–ª–∞–∑'
        ])
    ).distinct().all()

    glasses_subcategories = db.session.query(Product.types).filter(
        Product.types.in_([
            '–ú—É–∂—Å–∫–∏–µ', '–ñ–µ–Ω—Å–∫–∏–µ', '–£–Ω–∏—Å–µ–∫—Å'
        ])
    ).distinct().all()

    cosmetics_subcategories = [sub[0] for sub in cosmetics_subcategories]
    glasses_subcategories = [sub[0] for sub in glasses_subcategories]

    return render_template(
        'admin_panel.html',
        products=products,
        orders=orders,
        cosmetics_subcategories=cosmetics_subcategories,
        glasses_subcategories=glasses_subcategories
    )


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Ñ–æ—Ä–º–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞)
@app.route('/admin/add_product', methods=['GET', 'POST'])
def add_product():
    if not is_admin():
        return abort(403)

    photonum = None
    DEFAULT_IMAGE = 'default.jpg'  # –∏–º—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ static/uploads/

    if request.method == 'POST':
        name = request.form['name']
        price = float(request.form['price'])
        desc = request.form['desc']
        brand = request.form['brand']
        country = request.form['country']
        types = request.form['types']

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ input type="file"
        file = request.files.get('image')
        manual_image_name = request.form.get('image_name', '').strip()  # –∏–º—è, –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä—É—á–Ω—É—é

        if file and allowed_file(file.filename):
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            filename = secure_filename(file.filename)
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(filepath)
            photonum = filename
        elif manual_image_name:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –∏–º—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é
            secure_name = secure_filename(manual_image_name)
            manual_image_path = os.path.join(app.config['UPLOAD_FOLDER'], secure_name)
            if os.path.exists(manual_image_path):
                photonum = secure_name  # —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º
            else:
                photonum = DEFAULT_IMAGE  # —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî –¥–µ—Ñ–æ–ª—Ç
        else:
            # –ù–∏ –∑–∞–≥—Ä—É–∑–∫–∏, –Ω–∏ –∏–º–µ–Ω–∏ ‚Äî –¥–µ—Ñ–æ–ª—Ç
            photonum = DEFAULT_IMAGE

        new_product = Product(
            name=name,
            price=price,
            desc=desc,
            brand=brand,
            country=country,
            types=types,
            photonum=photonum
        )

        db.session.add(new_product)
        db.session.commit()
        flash('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!', 'success')
        return render_template('add_product.html', photonum=photonum)

    return render_template('add_product.html')


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@app.route('/admin/edit_product/<int:product_id>', methods=['GET', 'POST'])
def edit_product(product_id):
    if not is_admin():
        return abort(403)

    product = Product.query.get_or_404(product_id)

    if request.method == 'POST':
        product.name = request.form['name']
        product.price = float(request.form['price'])
        product.desc = request.form['desc']
        product.brand = request.form['brand']
        product.country = request.form['country']
        product.types = request.form['types']
        product.photonum = request.form['photonum']
        db.session.commit()
        flash('–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω!', 'success')
        return redirect(url_for('admin_panel'))

    return render_template('edit_product.html', product=product)

# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@app.route('/admin/delete_product/<int:product_id>', methods=['POST'])
def delete_product(product_id):
    if not is_admin():
        return abort(403)

    product = Product.query.get_or_404(product_id)
    db.session.delete(product)
    db.session.commit()
    flash('–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω!', 'info')
    return redirect(url_for('admin_panel'))




from flask import render_template

import random

from random import sample


@app.route('/product/<int:product_id>')
def product_page(product_id):
    product = Product.query.get_or_404(product_id)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ
    same_category_products = Product.query.filter(Product.types == product.types, Product.id != product.id).all()

    # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ 4, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 4 ‚Äî –≤—Å–µ
    recommended = sample(same_category_products, min(4, len(same_category_products)))

    return render_template('product.html', product=product, recommended=recommended)

from flask import session, abort



import random

def generate_discount(product):
    # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –æ—Ç 1.1 –¥–æ 1.66 (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 10%‚Äì40% —Å–∫–∏–¥–∫–µ)
    multiplier = random.uniform(1.1, 1.66)
    old_price = round(product.price * multiplier, 2)
    discount_percent = round(100 * (old_price - product.price) / old_price)

    product.old_price = old_price
    product.discount_percent = discount_percent

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    app.run(debug=True)
